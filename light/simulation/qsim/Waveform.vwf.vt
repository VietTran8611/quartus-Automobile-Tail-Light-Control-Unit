// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/18/2022 15:27:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          light
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module light_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b;
reg clk;
reg l;
reg r;
// wires                                               
wire al;
wire l1o;
wire l2o;
wire l3o;
wire l4o;
wire r1o;
wire r2o;
wire r3o;
wire r4o;

// assign statements (if any)                          
light i1 (
// port map - connection between master ports and signals/registers   
	.al(al),
	.b(b),
	.clk(clk),
	.l(l),
	.l1o(l1o),
	.l2o(l2o),
	.l3o(l3o),
	.l4o(l4o),
	.r(r),
	.r1o(r1o),
	.r2o(r2o),
	.r3o(r3o),
	.r4o(r4o)
);
initial 
begin 
#800000 $stop;
end 

// l
initial
begin
	l = 1'b0;
	l = #160000 1'b1;
	l = #170000 1'b0;
	l = #100000 1'b1;
	l = #60000 1'b0;
end 

// r
initial
begin
	r = 1'b0;
	r = #20000 1'b1;
	r = #140000 1'b0;
	r = #270000 1'b1;
	r = #60000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #10000 1'b1;
	b = #150000 1'b0;
	b = #260000 1'b1;
	b = #10000 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #100000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #240000 1'b1;
	clk = #50000 1'b0;
end 
endmodule

